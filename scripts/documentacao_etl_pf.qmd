---
title: "Documentação do SINC (Sistema Inteligente Negocia.Cloud) para Pessoa Física"
author: "negocia.cloud"
format: html
editor: visual
---

```{r setup01, echo = FALSE, warning = FALSE, error = FALSE, results = FALSE, message = FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, results = FALSE, message = FALSE, eval = FALSE, fig.align = "center")
```

## Sobre a documentação

Essa documentação foi elaborada de modo a facilitar o entendimento da equipe técnica quanto ao funcionamento de todo o processo do **Sistema Inteligente Negocia.Cloud** - *SINC*.

O *SINC* foi desenvolvido pensanddo em simplificar o processo de segmentação e cálculo de saúde financeira do cliente/usuário final sem perder a complexidade dos melhores algoritmos de aprendizado de máquina e conceitos estatísticos.

## Sobre o *SINC*

O *SINC* foi desenvolvido em linguagem *R*, devido à sua versatilidade em manipulação de dados, aplicação de modelos estatísticos e de aprendizagem de máquina.

Tal sistema garante ao **Negocia.cloud** um diferencial em relação à outras ferramentas de mercado, pois utiliza dos mais modernos e complexos algoritmos e entrega algo simples e de fácil entendimento ao usuário final.

## Sobre os dados

Os dados foram gerados automaticamente pelo site <http://www.fakenamegenerator.com>. Esses dados foram de extrema importância para o desenvolvimento de todo o *SINC*.

## Bibliotecas e configurações de ambiente

No *chunk* abaixo, temos todas as configurações necessárias (de ambiente no RStudio) e as bibliotecas necessárias para executar o *SINC*.

Para garantir um certo padrão na geração dos números aleatórios configuramos um valor fixo à `seed`.

Em relação ás bibliotecas, foram utilizadas as seguintes:

-   `tidyverse` - é utilizada para facilitar a manipulação dos dados;
-   `openxlsx` - é utilizada para ler e manipular arquivos em Excel;
-   `lubridate` - biblioteca necessária para manipulação de datas;
-   `jsonlite` - essa biblioteca foi necessária para exportar os dados no formato **.json**;
-   `clValid` - essa biblioteca foi necessária para validar o melhor método de clusterização.

```{r setup02}
# Configurações do ambiente do RStudio
options(scipen = 999, digits = 5)

# Configurando uma seed para a geração de números aleatórios
set.seed(1234)

# Bibliotecas necessárias para a execução do script
library(tidyverse)
library(openxlsx)
library(lubridate)
library(jsonlite)
library(clValid)
```

## Leitura dos dados

Através da função `read.xlsx` realizamos a leitura dos dados, que estão no caminho `url_path` (variável utilizada para armazenar o caminho do arquivo).

```{r read_data}
# Dados de pessoas físicas gerados aleatóriamente
# FONTE: http://www.fakenamegenerator.com
dados_pf = read.xlsx(url_path)
```

Após a leitura dos dados, foram realizados certos tratamentos e manipulações que, apesar de não ser o foco do *SINC*, foram necessários para chegar à uma estrutura de dados o qual podemos aplicar os algoritmos para classificação dos clientes.

## Tratamento dos dados

Para alcançarmos a estrutura de dados que o *SINC* utiliza, realizamos alguns tratamentos (possível de ser observado no *chunk* abaixo). No final, a estrutura necessária para a tabela *sociodemográfica* é composta por:

-   **fiscalDocument**: chave primária que identifica o usuário (no caso o CPF);
-   **nm_nome**: nome completo do usuário;
-   **nm_genero**: gênero do usuário;
-   **dt_nascimento**: data de nascimento do usuário;
-   **num_idade**: idade do usuário;
-   **nm_endereco_completo**: endereço completo do usuário;
-   **nm_email**: e-mail do usuário;
-   **nm_telefone**: número de telefone do usuário.

```{r trat01}
# Tratamento dos dados de PF
dados_pf_trat = dados_pf %>%
  # Selecionanddo aleatóriamente 10% dos dados
  slice_sample(prop = 0.1) %>%
  # Modificando e criando nomas variáveis
  # - Birthday: transformação para o tipo DATE
  # - num_idade: cálculo da idade do indivíduo
  # - Gender: tradução do gênero
  mutate(Birthday = as.Date(Birthday, "%m/%d/%Y"),
         num_idade = floor(as.numeric(difftime(Sys.Date(), Birthday))/365),
         Gender = ifelse(Gender == "male", "Masculino", "Feminino"),
         nm_endereco_completo = paste0(StreetAddress, ", ", City, " - ", State, " - ", ZipCode),
         nm_nome = paste(GivenName, MiddleInitial, Surname)) %>%
  # Selecionando as variáveis de interesse e renomeando os mesmos
  select(c("fiscalDocument" = "NationalID",
           "nm_nome" = "nm_nome",
           "nm_genero" = "Gender",
           "dt_nascimento" = "Birthday",
           "num_idade" = "num_idade",
           "nm_endereco_completo" = "nm_endereco_completo",
           "nm_email" = "EmailAddress",
           "nm_telefone" = "TelephoneNumber"))
```

Após a definição da estrutura de dados, criamos uma imagem de dados transacionais baseado nos CPFs obtidos na tabela de dados criada acima.

```{r trat02}
# Criando a lista de CPFs
lista_cpf = unique(dados_pf_trat$fiscalDocument)
# Criando a lista de datas
lista_datas = as.Date(seq(from = as.Date("2010-01-01"), to = Sys.Date(), by = "month"))
# Criando uma tabela vazia para adicionar os dados transacionais
dados_transacionais_pf = tibble()
# Contador para o Loop
contador = 1

# Loop para gerar a tabela de
for(cpf in lista_cpf){
  
  # Visualização da "completude" da geração dos dados transacionais
  cat("\f")
  cat(paste(100*round(contador/length(lista_cpf), 4), "%"))
  contador = contador + 1
  
  # Gerando um número de "repetiçoes" aleatória
  num_rep = round(runif(n = 1, min = 1, max = length(lista_datas)), 0)
  
  # Gerando as listas auxiliares
  lista_aux_cpf = rep(cpf, num_rep)
  lista_aux_datas = sort(sample(x = lista_datas, size = num_rep))
  lista_aux_valor = round(runif(n = num_rep, min = 100, max = 600), 2)
  lista_aux_status_cobranca = sample(x = c("PAGO", "NÃO PAGO"), size = num_rep, prob = c(0.8, 0.2), replace = TRUE)
  
  # Criando tabela auxiliar baseaddo nas listas acima
  tbl_aux = tibble(fiscalDocument = lista_aux_cpf,
                   dt_transacao = lista_aux_datas,
                   num_valor_cobranca = lista_aux_valor,
                   nm_status_cobranca = lista_aux_status_cobranca)
  
  # Concatenando a tabela auxiliar com a tabela transacional completa
  dados_transacionais_pf = bind_rows(dados_transacionais_pf, tbl_aux)
  
} # Fim do "for"

# Criando o id_transacao
dados_transacionais_pf = dados_transacionais_pf %>%
  rownames_to_column(var = "id_transacao")

# Limpando a memória
rm(tbl_aux, contador, lista_cpf, lista_datas, lista_aux_cpf, lista_aux_datas, lista_aux_valor, lista_aux_status_cobranca, num_rep, cpf)
```

O *chunk* de código acima, traz um modelo de dados transacionais **mínimo** para que o *SINC* possa ser executado com sucesso.

Nos dados transacionais acima, as seguintes colunas foram consideradas:

-   **id_transacao**: chave primária que identifica uma determinada transação;
-   **fiscalDocument**: chave secundária que identifica o usuário (no caso o CPF);
-   **dt_transacao**: data em que a transação foi gerada;
-   **num_valor_cobranca**: valor da transação;
-   **nm_status_cobranca**: status da transação.

Como podemos observar, o *SINC* não exige alta complexidade nos dados para utilizar o melhor dos algoritmos de inteligência artificial.

## Cálculo do SCORE *SINC*

O **SCORE** ***SINC*** é um dos indicadores que o sistema gera de valor para o usuário final. Tal índice varia entre $0$ e $1$, sendo que $0$ é considerado como um *score* crítico e $1$ um *score* de excelência.

Para o início do cálculo do **SCORE** ***SINC***, se faz necessário a sumarização dos dados transacionais. Nesse processo de sumarização, foram calculados alguns índices que suportarão a segmentação de nossos clientes - condição essa essencial para o cálculo do *score*.

Os índices calculados foram:

-   **num_transacoes**: total de transações que o cliente possui com a empresa;
-   **num_transacoes_paga**: total de transações pagas pelo cliente;
-   **num_valor_pago**: valor total pago referente às transações pagas;
-   **num_transacoes_nao_paga**: total de transações não pagas pelo cliente;
-   **num_valor_nao_pago**: valor total não pago referente às transações não pagas.

```{r score}
# Sumarização dos dados transacionais
dados_score = dados_transacionais_pf %>%
  # Agrupamento por CPF
  group_by(fiscalDocument) %>%
  # Cálculos:
  # - num_transacoes: total de transações que o cliente possui
  # - num_transacoes_paga: total de transações pagas que o cliente possui
  # - num_valor_pago: total pago pelo cliente
  # - num_transacoes_nao_paga: total de transações não pagas que o cliente possui
  # - num_valor_nao_pago: total não pago pelo cliente
  summarise(num_transacoes = n(),
            num_transacoes_paga = sum(ifelse(nm_status_cobranca == "PAGO", 1, 0)),
            num_valor_pago = sum(ifelse(nm_status_cobranca == "PAGO", num_valor_cobranca, 0)),
            num_transacoes_nao_paga = sum(ifelse(nm_status_cobranca == "NÃO PAGO", 1, 0)),
            num_valor_nao_pago = sum(ifelse(nm_status_cobranca == "NÃO PAGO", num_valor_cobranca, 0))) %>%
  # Padronizamos (pelo método min-max) cada um dos índices criados anteriormente
  mutate(num_pontos_transacoes = (num_transacoes - min(num_transacoes))/(max(num_transacoes) - min(num_transacoes)),
         num_pontos_transacoes_paga = (num_transacoes_paga - min(num_transacoes_paga))/(max(num_transacoes_paga) - min(num_transacoes_paga)),
         num_pontos_valor_pago = (num_valor_pago - min(num_valor_pago))/(max(num_valor_pago) - min(num_valor_pago)),
         num_pontos_transacoes_nao_paga = (max(num_transacoes_nao_paga) - num_transacoes_nao_paga)/(max(num_transacoes_nao_paga) - min(num_transacoes_nao_paga)),
         num_pontos_valor_nao_pago = (max(num_valor_nao_pago) - num_valor_nao_pago)/(max(num_valor_nao_pago) - min(num_valor_nao_pago)),
         num_pontos_totais = num_pontos_transacoes + num_pontos_transacoes_paga + num_pontos_valor_pago + num_pontos_transacoes_nao_paga + num_pontos_valor_nao_pago,
         num_score = (num_pontos_totais - min(num_pontos_totais))/(max(num_pontos_totais) - min(num_pontos_totais)))
```

Os índices calculados acima são apenas um exemplo de como o *SINC* trabalha. Outros índices como o **LTV** (*Life Time Value*), **Tempo de fidelidade**, entre outros, podem ser parametrizados pelo usuário de modo que o *SINC* realizará o cálculo.

Para cada índice calculado, padronizamos através d

-   **num_pontos_transacoes**: padronização pelo método *min-max* do total de transações que o cliente possui com a empresa;
-   **num_pontos_transacoes_paga**: padronização pelo método *min-max* do total de transações pagas pelo cliente;
-   **num_pontos_valor_pago**: padronização pelo método *min-max* do valor total pago referente às transações pagas;
-   **num_pontos_transacoes_nao_paga**: padronização pelo método *min-max* do total de transações não pagas pelo cliente;
-   **num_pontos_valor_nao_pago**: padronização pelo método *min-max* do valor total não pago referente às transações não pagas;
-   **num_pontos_totais**: soma de todas as pontuações padronizadas anteriormente;
-   **num_score**: padronização pelo método *min-max* da pontuação total.

Além de serem necessários para o cálculo do *score*, os índices padronizados são utilizados para a segmentação da carteira e cálculo de outros índices que contribuem para o cálculo de desconto sugerido pelo nosso sistema.

## Modelo ótimo de *cluster*

Nosso sistema é capaz de definir o melhor algoritmo de clusterização dentre os definidos no *SINC* (*hierarchical*, $k$*-means*, $k$*-modes*, $k$*-prototypes*, *dbscan*, *pca*, *pam* e *mca*) e o tamanho ótimo desses clusters.

No exemplo abaixo, aplicamos a função `clValid` para simular qual qual o melhor algoritmo entre *hierarchical* e $k$*-means* e o tamanho ótimo dos clusters.

```{r cluster}
# Criando a imagem de dados que será utilizada na clusterização
dados_cluster = dados_score %>%
  column_to_rownames("fiscalDocument") %>%
  select(c("num_pontos_transacoes","num_pontos_transacoes_paga","num_pontos_valor_pago","num_pontos_transacoes_nao_paga","num_pontos_valor_nao_pago"))

# Algoritmo para validar e identificar o melhor método de aprendizado não supervisionado e o tamanho ótimo de clusters
validacao_cluster = clValid(dados_cluster,
                            nClust = 2:10,
                            clMethods = c("hierarchical","kmeans"),
                            validation = "internal",
                            maxitems = nrow(dados_cluster))
```

Com os resultados obtidos por esse método, nosso sistema consegue selecionar o melhor algoritmo de clusterização e o tamanho ótimo de clusters necessários a ponto de garantirmos a maior homogeneidade intra grupos e maior heterogeneidade entre grupos.

Outros métodos de validação também estarão disponíveis em nossos sistema.

## Taxa de desconto *SINC*

Conforme apresentamos, o *SINC* realiza diversos cálculos e utiliza dos mais modernos e eficazes algoritmos de inteligência artificial, de modo a simplificar a negociação entre as partes. Todos as *features* disponíveis, podem contribuir individualmente para que o usuário defina uma proposta de negociação.

Mas o *SINC* vai além! Com todos os cálculos disponíveis, oferecemos aos nossos usuários uma **taxa de desconto** que vai ser calculada a partir do *Score SINC* e do cluster o qual o cliente que receberá a proposta de negociação pertence.

Apesar de o *SINC* propor uma taxa de desconto baseada nos resultados calculados/preditos, o usuário tem a total liberdade para configurar a taxa de desconto.
